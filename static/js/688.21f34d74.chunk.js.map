{"version":3,"file":"static/js/688.21f34d74.chunk.js","mappings":"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","sources":["components/HOC/withAuthRedirect.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.tsx","webpack://social-network/./src/UI/Modal/Modal.module.css?67b6","UI/Modal/Modal.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/Profile.module.css?b512","webpack://social-network/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","webpack://social-network/./src/components/Profile/Posts/MyPosts.module.css?a95a","components/Profile/Posts/AddPostForm.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Profile.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n\r\nexport function withAuthRedirect<P>(Component: React.ComponentType<P>) {\r\n    const RedirectComponent: React.FC<P> = (props) => {\r\n        const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n        if (!isAuth) return <Navigate to ='/login' />\r\n        return <Component { ...props } />\r\n    }\r\n    return RedirectComponent\r\n}","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useAppDispatch } from \"../../../Hooks/useAppDispatch\";\r\n// @ts-ignore\r\nimport { CustomInput } from \"../../../UI/CustomInput/CustomInput\";\r\nimport { updateUsersStatus } from '../../../redux/profileReducer';\r\n\r\ntype PropsType = {\r\n  status: string\r\n  isOwner: boolean\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    if (props.isOwner) {\r\n      setEditMode(true);\r\n    }\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    dispatch(updateUsersStatus(status));\r\n  };\r\n\r\n  const onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return props.isOwner && editMode ? (\r\n    <div>\r\n      <CustomInput\r\n        onChange={onStatusChange}\r\n        onBlur={deactivateEditMode}\r\n        autoFocus={true}\r\n        value={status}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div onClick={activateEditMode}>\r\n      <span>Status: </span>{props.status}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__h+ube\",\"userEditingData\":\"ProfileInfo_userEditingData__A6yWj\",\"checkbox\":\"ProfileInfo_checkbox__UPLSv\",\"formField\":\"ProfileInfo_formField__Ryhaq\",\"userAvatar\":\"ProfileInfo_userAvatar__kqUMe\",\"userStatus\":\"ProfileInfo_userStatus__EQPA7\",\"uploadAvatar\":\"ProfileInfo_uploadAvatar__JDc7J\",\"userData\":\"ProfileInfo_userData__Q7hTJ\",\"contacts\":\"ProfileInfo_contacts__z4OPa\"};","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { saveProfile, actions } from '../../../redux/profileReducer';\r\nimport { CustomContentButton } from \"../../../UI/CustomContentButton/CustomContentButton\";\r\nimport cn from \"classnames\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { ProfileType, ContactType } from '../../../Types/types';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { useAppDispatch } from '../../../Hooks/useAppDispatch';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  deactivateEditMode: () => void\r\n}\r\ninterface UserSubmitHandle extends ProfileType {\r\n  error: null | string[]\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType> = (props) => {\r\n  const { register, handleSubmit } = useForm<UserSubmitHandle>({\r\n    mode: \"onBlur\",\r\n    defaultValues: props.profile,\r\n  });\r\n\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const onSubmit = async (data: UserSubmitHandle) => {\r\n    const serverResponseMessage = await dispatch(saveProfile(data));\r\n    if (serverResponseMessage === \"success\") {\r\n      props.deactivateEditMode();\r\n    }\r\n  };\r\n\r\n  const onCancelClick = () => {\r\n    props.deactivateEditMode();\r\n    dispatch(actions.showErrorMessages(null));\r\n  };\r\n\r\n  const error = useSelector((state: AppStateType) => state.profilePage.errorMessages);\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={s.userEditingData}>\r\n      <div className={s.formField}>\r\n        <div>\r\n          <label htmlFor=\"fullName\">Full Name:</label>\r\n        </div>\r\n        <input\r\n          id=\"fullName\"\r\n          type=\"text\"\r\n          {...register(\"fullName\")}\r\n        />\r\n      </div>\r\n      <div className={s.formField}>\r\n        <div>\r\n          <label htmlFor=\"aboutMe\">About me:</label>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          id=\"aboutMe\"\r\n          {...register(\"aboutMe\")}\r\n        />\r\n      </div>\r\n      <div className={cn(s.checkbox, s.formField)}>\r\n        <span>Looking for a job:</span>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"lookingForAJob\"\r\n          {...register(\"lookingForAJob\")}\r\n        />\r\n        <label htmlFor=\"true\"></label>\r\n      </div>\r\n      <div className={s.formField}>\r\n        <div>\r\n          <label htmlFor=\"lookingForAJobDescription\">\r\n            My professional skills:\r\n          </label>\r\n        </div>\r\n        <input\r\n          type=\"textarea\"\r\n          id=\"lookingForAJobDescription\"\r\n          {...register(\"lookingForAJobDescription\")}\r\n        />\r\n      </div>\r\n      {Object.entries(props.profile.contacts).map(([key], index) => (\r\n        <div className={cn(s.contact, s.formField)} key={index}>\r\n          <div>\r\n            <label htmlFor=\"contact\">{key}:</label>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            {...register(`contacts.${key as keyof ContactType}`)}\r\n          />\r\n        </div>\r\n      ))}\r\n      <div>\r\n        {error && (\r\n          <p style={{ color: \"red\" }}>{error?.join(\", \") || \"Error!\"}</p>\r\n        )}\r\n      </div>\r\n      <CustomContentButton type=\"submit\">Save changes</CustomContentButton>\r\n      <span>\r\n        <CustomContentButton\r\n          className={s.cancelChangesBtn}\r\n          type=\"button\"\r\n          onClick={onCancelClick}\r\n        >\r\n          Cancel changes\r\n        </CustomContentButton>\r\n      </span>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ProfileDataForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"Modal_modalOverlay__KEf+C\",\"content\":\"Modal_content__kT+Q+\"};","import { useEffect } from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport s from './Modal.module.css'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    isOpen: boolean\r\n    children: React.ReactNode\r\n    closeModal: () => void\r\n}\r\n\r\nexport const Modal:React.FC<PropsType> = (props) => {\r\n    useEffect(() => {\r\n        const keydownListener = (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape' && props.isOpen) {\r\n                props.closeModal()\r\n            }\r\n        }\r\n        window.addEventListener('keydown', keydownListener)\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', keydownListener)\r\n        }\r\n    }, [props.closeModal, props.isOpen])\r\n\r\n    if (!props.isOpen) {\r\n        return null\r\n    }\r\n\r\n    const modalJsx = (\r\n        <div className={s.modalOverlay} onClick={props.closeModal}>\r\n            <div onClick={(event) => event.stopPropagation()} className={s.content}>{props.children}</div>\r\n        </div>\r\n    )\r\n\r\n    return createPortal(modalJsx, document.body);\r\n}\r\n\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport defaultAvatar from \"../../../images/DefaultAvatar/defaultAvatar.png\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { useState } from \"react\";\r\nimport { Modal } from \"../../../UI/Modal/Modal\";\r\nimport { useCallback } from \"react\";\r\nimport { CustomContentButton } from \"../../../UI/CustomContentButton/CustomContentButton\";\r\nimport { ProfileType } from '../../../Types/types';\r\nimport { useAppDispatch } from \"../../../Hooks/useAppDispatch\";\r\nimport { savePhoto } from '../../../redux/profileReducer';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  isOwner: boolean\r\n  status: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n  let [isEditMode, setIsEditMode] = useState(false);\r\n  const dispatch = useAppDispatch()\r\n  const closeModal = useCallback(() => {\r\n    setIsEditMode(false);\r\n  }, []);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onMainPhotoSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target;\r\n    const file: null | File = target.files ? target.files[0] : null\r\n    if (file) {\r\n      dispatch(savePhoto(file));\r\n    }\r\n  };\r\n\r\n  const activateEditMode = () => {\r\n    setIsEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setIsEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div className={s.descriptionBlock}>\r\n      <div className={s.userAvatar}>\r\n        <img src={props.profile.photos.large || defaultAvatar} alt=\"avatar\" />\r\n        {props.isOwner && (\r\n          <div className={s.uploadAvatar}>\r\n            <label htmlFor=\"avatar\">\r\n              {props.profile.photos.large\r\n                ? \"Update your photo\"\r\n                : \"Upload your photo\"}\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"avatar\"\r\n              name=\"avatar\"\r\n              onChange={onMainPhotoSelected}\r\n              hidden\r\n            ></input>\r\n          </div>\r\n        )}\r\n        <div className={s.userStatus}>\r\n          <ProfileStatus\r\n            status={props.status}\r\n            isOwner={props.isOwner}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ProfileData\r\n        profile={props.profile}\r\n        isOwner={props.isOwner}\r\n        activateEditMode={activateEditMode}\r\n      />\r\n      <Modal isOpen={isEditMode} closeModal={closeModal}>\r\n        <ProfileDataForm\r\n          profile={props.profile}\r\n          deactivateEditMode={deactivateEditMode}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n  return (\r\n    <div className={s.userData}>\r\n      <div>\r\n        <b>Full Name</b>: {props.profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>: {props.profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n      </div>\r\n      <div>\r\n        <b>My Professional skills</b>: {props.profile.lookingForAJobDescription}\r\n      </div>\r\n      <div className={s.contacts}>\r\n        <b>Contacts</b>:\r\n        {Object.entries(props.profile.contacts).map(([key, value], index) => (\r\n          <Contact contactTitle={key} contactValue={value} key={index} />\r\n        ))}\r\n      </div>\r\n      {props.isOwner && (\r\n        <CustomContentButton onClick={props.activateEditMode}>\r\n          Edit your profile data\r\n        </CustomContentButton>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contactList}>\r\n      {contactTitle}: {contactValue}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContent\":\"Profile_profileContent__D-CRy\",\"profilePosts\":\"Profile_profilePosts__o2O9x\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+LbrZ\",\"avatar\":\"Post_avatar__lVSxM\",\"postText\":\"Post_postText__hWRA4\",\"likes\":\"Post_likes__qO1MU\"};","import defaultAvatar from \"../../../../images/DefaultAvatar/defaultAvatar.png\";\r\nimport s from \"./Post.module.css\";\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n  message: string | null\r\n  likes: string | null\r\n  key: number | null\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={defaultAvatar} className={s.avatar} alt='user avatar'></img>\r\n      <span className={s.postText}>{props.message}</span>\r\n      <div className={s.likes}>{props.likes}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__1SYB2\",\"posts\":\"MyPosts_posts__avlut\",\"addPost\":\"MyPosts_addPost__P+SxH\"};","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useAppDispatch } from \"../../../Hooks/useAppDispatch\";\r\nimport { actions } from '../../../redux/profileReducer';\r\nimport { CustomContentButton } from \"../../../UI/CustomContentButton/CustomContentButton\";\r\nimport CustomTextarea from \"../../../UI/CustomTextArea/CustomTextArea\";\r\nimport s from \"./MyPosts.module.css\";\r\n\r\nconst AddPostForm: React.FC = () => {\r\n  type UserSubmitHandle = {\r\n    postText: string\r\n  }\r\n\r\n  const {\r\n    reset,\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<UserSubmitHandle>({ mode: \"onChange\" });\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const onSubmit = (data: UserSubmitHandle) => {\r\n    dispatch(actions.addPostActionCreator(data.postText));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={s.addPost}>\r\n      <CustomTextarea\r\n        placeholder=\"Enter your post\"\r\n        {...register(\"postText\", {\r\n          required: \"You cannot send an empty post\",\r\n        })}\r\n        customError={\r\n          errors?.postText ? errors?.postText.message || \"Error!\" : null\r\n        }\r\n      />\r\n      <div>\r\n        <CustomContentButton>Add post</CustomContentButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport AddPostForm from \"./AddPostForm\";\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nconst MyPosts: React.FC = () => {\r\n  const posts = useSelector((state: AppStateType) => state.profilePage.posts)\r\n  let postsElements = posts.map(post => (\r\n    <Post message={post.message} likes={post.likes} key={post.id} />\r\n  ));\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Posts</h3>\r\n      <AddPostForm />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n\r\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\r\nimport s from \"./Profile.module.css\";\r\nimport React, { useEffect } from 'react'\r\nimport MyPostsMemorized from './Posts/MyPosts';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAppDispatch } from \"../../Hooks/useAppDispatch\";\r\nimport { actions, getUsersProfile, getUsersStatus } from '../../redux/profileReducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst Profile: React.FC = () => {\r\n  const params = useParams();\r\n  const dispatch = useAppDispatch()\r\n\r\n  const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n  const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n\r\n  useEffect(() => {\r\n    let userId = params.userId ? +params.userId : null;\r\n    if (!userId) {\r\n      userId = authorizedUserId;\r\n    }\r\n    dispatch(getUsersProfile(userId));\r\n    dispatch(getUsersStatus(userId));\r\n  }, [params.userId, dispatch, authorizedUserId]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(actions.setUserProfile(null))\r\n    }\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className={s.profileContent}>\r\n      <div className={s.profileInfo}>\r\n        <ProfileInfo\r\n          profile={profile}\r\n          status={status}\r\n          isOwner={!params.userId}\r\n        />\r\n      </div>\r\n      <div className={s.profilePosts}>\r\n        <MyPostsMemorized />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAuthRedirect(Profile);\r\n"],"names":["withAuthRedirect","Component","props","useSelector","state","auth","isAuth","to","useState","editMode","setEditMode","status","setStatus","dispatch","useAppDispatch","useEffect","isOwner","CustomInput","onChange","e","currentTarget","value","onBlur","updateUsersStatus","autoFocus","onClick","useForm","mode","defaultValues","profile","register","handleSubmit","onSubmit","data","saveProfile","deactivateEditMode","error","profilePage","errorMessages","className","s","htmlFor","id","type","cn","Object","entries","contacts","map","index","key","style","color","join","CustomContentButton","actions","Modal","keydownListener","event","isOpen","closeModal","window","addEventListener","removeEventListener","modalJsx","stopPropagation","children","createPortal","document","body","ProfileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","activateEditMode","isEditMode","setIsEditMode","useCallback","Preloader","src","photos","large","defaultAvatar","alt","name","target","file","files","savePhoto","hidden","message","likes","reset","errors","formState","postText","placeholder","required","customError","MyPosts","postsElements","posts","post","React","params","useParams","authorizedUserId","userId","getUsersProfile","getUsersStatus"],"sourceRoot":""}